<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 2.9 (Python 3.7.3 on win32)" generated="20190807 16:48:10.186">
<suite id="s1" name="Group Scenarious" source="C:\Users\Nastya\PycharmProjects\python_training\rf\group_scenarious.robot">
<kw name="Init Fixtures" library="rf.AddressBook" type="setup">
<status status="PASS" starttime="20190807 16:48:10.441" endtime="20190807 16:48:16.404"></status>
</kw>
<test id="s1-t1" name="Add new group">
<kw name="Get Group List" library="rf.AddressBook">
<assign>
<var>${old_list}</var>
</assign>
<msg timestamp="20190807 16:48:16.406" level="INFO">${old_list} = [Group(name2, 137, header2, footer2), Group(name1, 242, header1, footer1)]</msg>
<status status="PASS" starttime="20190807 16:48:16.405" endtime="20190807 16:48:16.406"></status>
</kw>
<kw name="New Group" library="rf.AddressBook">
<arguments>
<arg>name1</arg>
<arg>header1</arg>
<arg>footer1</arg>
</arguments>
<assign>
<var>${group}</var>
</assign>
<msg timestamp="20190807 16:48:16.407" level="INFO">${group} = Group(name1, None, header1, footer1)</msg>
<status status="PASS" starttime="20190807 16:48:16.407" endtime="20190807 16:48:16.407"></status>
</kw>
<kw name="Create Group" library="rf.AddressBook">
<arguments>
<arg>${group}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:16.407" endtime="20190807 16:48:17.270"></status>
</kw>
<kw name="Get Group List" library="rf.AddressBook">
<assign>
<var>${new_list}</var>
</assign>
<msg timestamp="20190807 16:48:17.272" level="INFO">${new_list} = [Group(name2, 137, header2, footer2), Group(name1, 242, header1, footer1), Group(name1, 243, header1, footer1)]</msg>
<status status="PASS" starttime="20190807 16:48:17.271" endtime="20190807 16:48:17.272"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${old_list}</arg>
<arg>${group}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.272" endtime="20190807 16:48:17.273"></status>
</kw>
<kw name="Group Lists Should Be Equal" library="rf.AddressBook">
<arguments>
<arg>${new_list}</arg>
<arg>${old_list}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.273" endtime="20190807 16:48:17.273"></status>
</kw>
<status status="PASS" starttime="20190807 16:48:16.404" endtime="20190807 16:48:17.274" critical="yes"></status>
</test>
<test id="s1-t2" name="Delete group">
<kw name="Get Group List" library="rf.AddressBook">
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190807 16:48:17.277" level="INFO">${list} = [Group(name2, 137, header2, footer2), Group(name1, 242, header1, footer1), Group(name1, 243, header1, footer1)]</msg>
<status status="PASS" starttime="20190807 16:48:17.276" endtime="20190807 16:48:17.277"></status>
</kw>
<kw name="Verify Group List Is Not Empty" library="rf.AddressBook">
<arguments>
<arg>${list}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.277" endtime="20190807 16:48:17.277"></status>
</kw>
<kw name="Get Group List" library="rf.AddressBook">
<assign>
<var>${old_list}</var>
</assign>
<msg timestamp="20190807 16:48:17.278" level="INFO">${old_list} = [Group(name2, 137, header2, footer2), Group(name1, 242, header1, footer1), Group(name1, 243, header1, footer1)]</msg>
<status status="PASS" starttime="20190807 16:48:17.278" endtime="20190807 16:48:17.278"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${old_list}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190807 16:48:17.279" level="INFO">Length is 3</msg>
<msg timestamp="20190807 16:48:17.279" level="INFO">${len} = 3</msg>
<status status="PASS" starttime="20190807 16:48:17.279" endtime="20190807 16:48:17.279"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>random.randrange(${len})</arg>
<arg>random</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20190807 16:48:17.286" level="INFO">${index} = 2</msg>
<status status="PASS" starttime="20190807 16:48:17.279" endtime="20190807 16:48:17.286"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${old_list}</arg>
<arg>${index}</arg>
</arguments>
<assign>
<var>${group}</var>
</assign>
<msg timestamp="20190807 16:48:17.287" level="INFO">${group} = Group(name1, 243, header1, footer1)</msg>
<status status="PASS" starttime="20190807 16:48:17.287" endtime="20190807 16:48:17.287"></status>
</kw>
<kw name="Delete Group" library="rf.AddressBook">
<arguments>
<arg>${group}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.288" endtime="20190807 16:48:17.583"></status>
</kw>
<kw name="Get Group List" library="rf.AddressBook">
<assign>
<var>${new_list}</var>
</assign>
<msg timestamp="20190807 16:48:17.585" level="INFO">${new_list} = [Group(name2, 137, header2, footer2), Group(name1, 242, header1, footer1)]</msg>
<status status="PASS" starttime="20190807 16:48:17.584" endtime="20190807 16:48:17.585"></status>
</kw>
<kw name="Remove Values From List" library="Collections">
<doc>Removes all occurrences of given ``values`` from ``list``.</doc>
<arguments>
<arg>${old_list}</arg>
<arg>${group}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.586" endtime="20190807 16:48:17.587"></status>
</kw>
<kw name="Group Lists Should Be Equal" library="rf.AddressBook">
<arguments>
<arg>${new_list}</arg>
<arg>${old_list}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.587" endtime="20190807 16:48:17.588"></status>
</kw>
<status status="PASS" starttime="20190807 16:48:17.275" endtime="20190807 16:48:17.589" critical="yes"></status>
</test>
<test id="s1-t3" name="Modify group">
<kw name="Get Group List" library="rf.AddressBook">
<assign>
<var>${list}</var>
</assign>
<msg timestamp="20190807 16:48:17.591" level="INFO">${list} = [Group(name2, 137, header2, footer2), Group(name1, 242, header1, footer1)]</msg>
<status status="PASS" starttime="20190807 16:48:17.590" endtime="20190807 16:48:17.591"></status>
</kw>
<kw name="Verify Group List Is Not Empty" library="rf.AddressBook">
<arguments>
<arg>${list}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.592" endtime="20190807 16:48:17.592"></status>
</kw>
<kw name="Get Group List" library="rf.AddressBook">
<assign>
<var>${old_list}</var>
</assign>
<msg timestamp="20190807 16:48:17.594" level="INFO">${old_list} = [Group(name2, 137, header2, footer2), Group(name1, 242, header1, footer1)]</msg>
<status status="PASS" starttime="20190807 16:48:17.593" endtime="20190807 16:48:17.594"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${old_list}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190807 16:48:17.595" level="INFO">Length is 2</msg>
<msg timestamp="20190807 16:48:17.595" level="INFO">${len} = 2</msg>
<status status="PASS" starttime="20190807 16:48:17.594" endtime="20190807 16:48:17.595"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>random.randrange(${len})</arg>
<arg>random</arg>
</arguments>
<assign>
<var>${index}</var>
</assign>
<msg timestamp="20190807 16:48:17.596" level="INFO">${index} = 0</msg>
<status status="PASS" starttime="20190807 16:48:17.595" endtime="20190807 16:48:17.596"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${old_list}</arg>
<arg>${index}</arg>
</arguments>
<assign>
<var>${group}</var>
</assign>
<msg timestamp="20190807 16:48:17.597" level="INFO">${group} = Group(name2, 137, header2, footer2)</msg>
<status status="PASS" starttime="20190807 16:48:17.596" endtime="20190807 16:48:17.597"></status>
</kw>
<kw name="Remove Values From List" library="Collections">
<doc>Removes all occurrences of given ``values`` from ``list``.</doc>
<arguments>
<arg>${old_list}</arg>
<arg>${group}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.597" endtime="20190807 16:48:17.598"></status>
</kw>
<kw name="New Group" library="rf.AddressBook">
<arguments>
<arg>name2</arg>
<arg>header2</arg>
<arg>footer2</arg>
</arguments>
<assign>
<var>${group_new_data}</var>
</assign>
<msg timestamp="20190807 16:48:17.599" level="INFO">${group_new_data} = Group(name2, None, header2, footer2)</msg>
<status status="PASS" starttime="20190807 16:48:17.598" endtime="20190807 16:48:17.599"></status>
</kw>
<kw name="Modify Group" library="rf.AddressBook">
<arguments>
<arg>${group}</arg>
<arg>${group_new_data}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:17.599" endtime="20190807 16:48:18.571"></status>
</kw>
<kw name="Get Group List" library="rf.AddressBook">
<assign>
<var>${new_list}</var>
</assign>
<msg timestamp="20190807 16:48:18.574" level="INFO">${new_list} = [Group(name2, 137, header2, footer2), Group(name1, 242, header1, footer1)]</msg>
<status status="PASS" starttime="20190807 16:48:18.572" endtime="20190807 16:48:18.574"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${old_list}</arg>
<arg>${group_new_data}</arg>
</arguments>
<status status="PASS" starttime="20190807 16:48:18.574" endtime="20190807 16:48:18.575"></status>
</kw>
<kw name="Group Lists Should Be Equal" library="rf.AddressBook">
<arguments>
<arg>${new_list}</arg>
<arg>${old_list}</arg>
</arguments>
<msg timestamp="20190807 16:48:18.576" level="FAIL">AssertionError</msg>
<status status="FAIL" starttime="20190807 16:48:18.575" endtime="20190807 16:48:18.577"></status>
</kw>
<status status="FAIL" starttime="20190807 16:48:17.590" endtime="20190807 16:48:18.577" critical="yes">AssertionError</status>
</test>
<kw name="Destroy Fixtures" library="rf.AddressBook" type="teardown">
<status status="PASS" starttime="20190807 16:48:18.579" endtime="20190807 16:48:20.710"></status>
</kw>
<status status="FAIL" starttime="20190807 16:48:10.188" endtime="20190807 16:48:20.710"></status>
</suite>
<statistics>
<total>
<stat pass="2" fail="1">Critical Tests</stat>
<stat pass="2" fail="1">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="2" fail="1" id="s1" name="Group Scenarious">Group Scenarious</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
